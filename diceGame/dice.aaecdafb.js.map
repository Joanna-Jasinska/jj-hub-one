{"mappings":"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","sources":["src/diceGame/data/dices.js","src/diceGame/js/functions.js","src/diceGame/data/newgame.js","src/diceGame/js/interface/onDices.js","src/diceGame/js/interface/onItems.js","src/diceGame/js/interface/clear-game.js","src/diceGame/js/initiate/_ng_dices-generate.js","src/diceGame/data/items.js","src/diceGame/js/initiate/_ng_items-generate.js","src/diceGame/js/initiate/newgame.js","src/diceGame/main.js"],"sourcesContent":["// export\nexport const dices = [\n  {\n    type: 'dice',\n    max: '4',\n    min: '1',\n    name: 'k4',\n    id: 'dicek4',\n  },\n  {\n    type: 'dice',\n    max: '6',\n    min: '1',\n    name: 'k6',\n    id: 'dicek6',\n  },\n  {\n    type: 'dice',\n    max: '8',\n    min: '1',\n    name: 'k8',\n    id: 'dicek8',\n  },\n  {\n    type: 'dice',\n    max: '10',\n    min: '1',\n    name: 'k10',\n    id: 'dicek10',\n  },\n  {\n    type: 'dice',\n    max: '12',\n    min: '1',\n    name: 'k12',\n    id: 'dicek12',\n  },\n  {\n    type: 'dice',\n    max: '20',\n    min: '1',\n    name: 'k20',\n    id: 'dicek20',\n  },\n  {\n    type: 'dice',\n    name: 'Random Dice',\n    id: 'dicerandom',\n  },\n];\n","export const log = (l = '------------------------------------------------') => {\n  console.log(l);\n};\n\nexport const functions = {\n  getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, 0)}`;\n  },\n  getRandom(max = 1, min = 1) {\n    return Math.floor(Math.random() * (max + 1 - min) + min);\n  },\n  getRandomDiceMax(max = 20, min = 4) {\n    let rangeMin = 4;\n    let rangeMax = 20;\n    const dices = [4, 6, 8, 10, 12, 20];\n    rangeMax = dices.indexOf(max) + 1;\n    rangeMin = dices.indexOf(min) + 1;\n    let rNum = Math.floor(\n      Math.random() * (rangeMax + 1 - rangeMin) + rangeMin - 1\n    );\n\n    return dices[rNum];\n  },\n\n  getDiceBackgroundColor(rolled, max = 6, min = 1) {\n    let bad = '#ffcc99'; //'#ffaa77'; //'#ff9966'; //red\n    let med = '#ffffbb'; //'#ffff99'; //yell\n    let uncommon = '#cfff9f'; //'#ccff99'; //l green\n    let epic = '#ff66ff'; // pink\n    let mythic = '#00ffff'; //'#66ffff'; // l blue\n    let perfect = '#00ff00'; // neon green\n    if (rolled == 20) return mythic;\n    if (rolled == min) return bad;\n    if (rolled == max) return perfect;\n    if (rolled <= Math.floor((max - min) / 5) + min) {\n      return bad;\n    }\n    if (rolled > 14) return epic;\n    if (rolled > 9) return uncommon;\n    return med;\n  },\n  getDiceBackgroundColorName(rolled, max = 6, min = 1) {\n    let varNamePart = `--dice-bg-color-`;\n    if (rolled == 20) return varNamePart + `mythic`;\n    if (rolled == min) return varNamePart + `bad`;\n    if (rolled == max) return varNamePart + `perfect`;\n    if (rolled <= Math.floor((max - min) / 5) + min) {\n      return varNamePart + `bad`;\n    }\n    if (rolled > 14) return varNamePart + `epic`;\n    if (rolled > 9) return varNamePart + `uncommon`;\n    return varNamePart + `medium`;\n  },\n};\n","// export\nexport const newGame = {\n  dices: [\n    {\n      id: 'dicek20',\n    },\n    {\n      id: 'dicek6',\n    },\n    {\n      id: 'dicek4',\n    },\n    {\n      id: 'dicerandom',\n    },\n    {\n      id: 'dicerandom',\n    },\n    {},\n  ],\n\n  items: [\n    {\n      id: 'use',\n    },\n    {\n      id: 'reroll',\n    },\n    {},\n  ],\n};\n","import { functions } from '../functions';\nexport const onDices = {\n  refreshDice(o) {\n    if (o.classList.contains('inactive')) {\n      o.classList.remove('inactive');\n    }\n    this.deselectDice(o);\n  },\n  rollDice(o) {\n    const diceFace = o.querySelector('.dice__rolled');\n    const diceMax = o.querySelector('.dice__max');\n    const dmax = parseInt(diceMax.innerText);\n    let dface = functions.getRandom(dmax);\n    diceFace.innerText = `${dface}`;\n    o.setAttribute(\n      'bgcolor',\n      `${functions.getDiceBackgroundColorName(dface, dmax)}`\n    );\n    // o.style.backgroundColor = `${f.getDiceBackgroundColor(dface, dmax)}`;\n    diceMax.innerText = `${dmax}`;\n  },\n  selectDice(o) {\n    if (o.classList.contains('dice') && !o.classList.contains('selected')) {\n      o.classList.add('selected');\n    } else {\n      this.deselectDice(o);\n    }\n  },\n  deactivateDice(o) {\n    if (o.classList.contains('dice') && !o.classList.contains('inactive')) {\n      o.classList.add('inactive');\n    }\n  },\n  deselectDice(o) {\n    if (o.classList.contains('selected')) {\n      o.classList.remove('selected');\n    }\n  },\n};\n","import { functions } from '../functions';\nimport { clearGame } from './clear-game';\nexport const onItems = {\n  checkActivation(o) {\n    return false;\n    // return functions.getRandom(1, 0);\n  },\n  refreshItem(o) {\n    if (o.classList.contains('inactive')) {\n      o.classList.remove('inactive');\n    }\n    this.deselectItem(o);\n  },\n  activateItem(o) {\n    if (o.classList.contains('item') && !o.classList.contains('selected')) {\n      o.classList.add('selected');\n      if (this.checkActivation(o)) {\n        clearGame.clearSelections();\n      }\n    } else {\n      this.deselectItem(o);\n    }\n  },\n  deselectItem(o) {\n    if (o.classList.contains('selected')) {\n      o.classList.remove('selected');\n    }\n  },\n\n  deactivateItem(o) {\n    if (o.classList.contains('item') && !o.classList.contains('inactive')) {\n      o.classList.add('inactive');\n    }\n  },\n};\n","import { log } from '../functions';\n\nimport { newGame } from '../../data/newgame';\nimport { newGameFunctions } from '../initiate/newgame';\nimport { onDices } from './onDices';\nimport { onItems } from './onItems';\n// import { _ng_dicesGenerate } from '../initiate/_ng_dices-generate';\nexport const clearGame = {\n  clearDiceBag() {\n    const diceBag = document.querySelector('.diceBag');\n    log('clearDiceBag()');\n    diceBag.innerText = '';\n    // _ng_dicesGenerate.generateButtons();\n    this.generateButtons();\n  },\n  clearItemBag() {\n    const itemBag = document.querySelector('.itemBag');\n    log('clearItemBag()');\n    itemBag.innerText = '';\n    // _ng_dicesGenerate.generateButtons();\n    // this.generateButtons();\n  },\n  clearSelections() {\n    const selected = document.querySelectorAll('.selected');\n    for (s of selected) {\n      s.classList.remove('selected');\n    }\n  },\n\n  generateButtons() {\n    const diceBag = document.querySelector('.diceBag');\n    log('generateButtons()');\n    // new game\n    diceBag.prepend(document.createElement('div'));\n    const newGameBtn = diceBag.querySelector('div');\n    newGameBtn.classList.add('button-new-game', 'button');\n    newGameBtn.innerText = 'New\\nGame';\n    newGameBtn.onclick = e => {\n      e.preventDefault();\n      newGameFunctions.initiateNewGame(newGame);\n    };\n    // end turn\n    diceBag.prepend(document.createElement('div'));\n    const endTurnBtn = diceBag.querySelector('div');\n    endTurnBtn.classList.add('button-end-turn', 'button');\n    endTurnBtn.innerText = 'End\\nTurn';\n    endTurnBtn.onclick = e => {\n      e.preventDefault();\n      const haveDices = document.querySelectorAll('.dice');\n      for (let i = 0; i < haveDices.length; i++) {\n        onDices.refreshDice(haveDices[i]);\n        onDices.rollDice(haveDices[i]);\n      }\n      const haveItems = document.querySelectorAll('.item');\n      for (let i = 0; i < haveItems.length; i++) {\n        onItems.refreshItem(haveItems[i]);\n      }\n    };\n  },\n};\n","import { log } from '../functions';\nimport { dices } from '../../data/dices';\nimport { functions } from '../functions';\nimport { onDices } from '../interface/onDices';\nexport const _ng_dicesGenerate = {\n  fetchDice(diceId = 'dicerandom') {\n    let dice = {};\n    for (const d of dices) {\n      if (d.id == diceId) {\n        return d;\n      }\n    }\n  },\n\n  generateDices(dicesInput) {\n    const o = this;\n    log(`generateDices(${dicesInput})`);\n    const diceBag = document.querySelector('.diceBag');\n    // console.log(diceBag);\n\n    for (const di of dicesInput) {\n      log(`fetching dice, dice: ${di}`);\n      log(di);\n      log(di.id);\n      log(`fetchDice(di): ${o.fetchDice(di.id)}`);\n      const d = o.fetchDice(di.id);\n      diceBag.append(document.createElement('div'));\n      const dice =\n        document.querySelectorAll('.diceBag > div')[\n          document.querySelectorAll('.diceBag > div').length - 1\n        ];\n      dice.classList.add(d.type ? d.type : 'dice', 'button');\n      dice.append(document.createElement('div'));\n      const diceFace = dice.querySelector('div');\n      diceFace.classList.add('dice__rolled');\n      let dmax = parseInt(d.max)\n        ? parseInt(d.max)\n        : functions.getRandomDiceMax();\n      let dface = functions.getRandom(dmax);\n      diceFace.innerText = `${dface}`;\n      // dice.style.backgroundColor = `${f.getDiceBackgroundColor(dface, dmax)}`;\n      // console.log(dice);\n      dice.setAttribute(\n        'bgcolor',\n        `${functions.getDiceBackgroundColorName(dface, dmax)}`\n      );\n      // diceBefore.style.backgroundColor = `${f.getDiceBackgroundColor(dface, dmax)}`;\n      dice.prepend(document.createElement('div'));\n      const diceMax = dice.querySelector('div');\n      diceMax.classList.add('dice__max');\n      diceMax.innerText = `${dmax}`;\n      dice.onclick = e => {\n        e.preventDefault();\n        onDices.selectDice(e.currentTarget);\n      };\n      // link.append(document.createElement('img'));\n      // link.classList.add('gallery__item');\n      // link.href = gi.original;\n      // const img = dice.querySelector('img');\n      // img.classList.add('gallery__image');\n      // img.src = gi.preview;\n      // img.alt = gi.description;\n      // img.dataset.source = gi.original;\n\n      // link.onclick = e => {\n      //   e.preventDefault();\n      // };\n    }\n  },\n};\n","export const items = [\n  {\n    type: 'item',\n    name: 'Waste\\nDice',\n    actions: ['use'],\n    reqDice: true,\n    minDiceAmount: 1,\n    maxDiceAmount: 1,\n    reqValue: false,\n    reqExact: false,\n    perTurnUses: 3,\n    id: 'use',\n  },\n  {\n    type: 'item',\n    name: 'Reroll\\nDice',\n    actions: ['reroll', 'use'],\n    reqDice: true,\n    minDiceAmount: 1,\n    maxDiceAmount: 1,\n    reqValue: false,\n    reqExact: false,\n    minValue: 0,\n    maxValue: 0,\n    exactValue: 0,\n    perTurnUses: 1,\n    id: 'reroll',\n  },\n];\n","import { log } from './../functions';\nimport { items } from '../../data/items';\nimport { functions } from '../functions';\nimport { onItems } from '../interface/onItems';\nexport const _ng_itemsGenerate = {\n  fetchItem(itemId = 'use') {\n    let item = {};\n    for (itm of items) {\n      if (itm.id == itemId) {\n        return itm;\n      }\n    }\n  },\n\n  generateItems(itemsInput) {\n    const o = this;\n    log(`generateItems(${itemsInput})`);\n    const itemBag = document.querySelector('.itemBag');\n\n    for (const ii of itemsInput) {\n      log(`fetching item, item: ${ii}`);\n      log(ii);\n      log(ii.id);\n      log(`fetchItem(ii): ${o.fetchItem(ii.id)}`);\n      const i = o.fetchItem(ii.id);\n      log(i);\n      itemBag.append(document.createElement('div'));\n      const item =\n        document.querySelectorAll('.itemBag > div')[\n          document.querySelectorAll('.itemBag > div').length - 1\n        ];\n      item.classList.add(i.type ? i.type : 'item', 'button');\n      item.append(document.createElement('div'));\n      const itemFace = item.querySelector('div');\n      itemFace.classList.add('item__name');\n      let iname = i.name ? i.name : 'no\\nitem';\n      itemFace.innerText = `${iname}`;\n      item.prepend(document.createElement('div'));\n      const itemUses = item.querySelector('div');\n      itemUses.classList.add('item__uses');\n      let iuses = parseInt(i.perTurnUses) ? parseInt(i.perTurnUses) : '0';\n      itemUses.innerText = `${iuses}`;\n      //   : functions.getRandomDiceMax();\n      // let dface = functions.getRandom(dmax);\n\n      // dice.setAttribute(\n      //   'bgcolor',\n      //   `${functions.getDiceBackgroundColorName(dface, dmax)}`\n      // );\n      //  dice.prepend(document.createElement('div'));\n      // const diceMax = dice.querySelector('div');\n      // diceMax.classList.add('dice__max');\n      // diceMax.innerText = `${dmax}`;\n      item.onclick = e => {\n        e.preventDefault();\n        onItems.activateItem(e.currentTarget);\n      };\n    }\n  },\n};\n","import { log } from '../functions';\nimport { clearGame } from '../interface/clear-game';\nimport { _ng_dicesGenerate } from '../initiate/_ng_dices-generate';\nimport { _ng_itemsGenerate } from '../initiate/_ng_items-generate';\nexport const newGameFunctions = {\n  initiateNewGame(newGameState = newGame) {\n    log(`initiateNewGame(newGameState = ${newGameState})`);\n    clearGame.clearItemBag();\n    clearGame.clearDiceBag();\n    _ng_dicesGenerate.generateDices(newGameState.dices);\n    _ng_itemsGenerate.generateItems(newGameState.items);\n    log();\n  },\n};\n","// module.exports = require('./lodash');\nimport { dices } from './data/dices';\n// import { f } from './js/initiate/!getFunctions';\nimport { log } from './js/functions';\n// import { f } from './js/functions';\nimport { newGame } from './data/newgame';\nimport { newGameFunctions } from './js/initiate/newgame';\n\n// console.log(dices);\n// console.log(newGame);\n// console.log(`f= ${f}`);\n// console.log('random: ' + f.getRandom());\n\nlog();\nlog('-----------page loaded----------');\nlog();\n// f.initiateNewGame(newGame);\nnewGameFunctions.initiateNewGame(newGame);\n"],"names":["$834baeaa0ffbd054$export$b3c00370ed5c6834","type","max","min","name","id","$2da178b40d977298$export$bef1f36f5486a6a3","l","console","log","$2da178b40d977298$export$18af1f934c132a41","getRandomHexColor","Math","floor","random","toString","padStart","getRandom","getRandomDiceMax","rangeMin","rangeMax","dices","indexOf","getDiceBackgroundColor","rolled","bad","getDiceBackgroundColorName","varNamePart","$35baad526ccc8b96$export$4021de1c0df2c0bd","items","$2a5d2592a719f297$export$88eac910e3713790","refreshDice","o","classList","contains","remove","this","deselectDice","rollDice","diceFace","querySelector","diceMax","dmax","parseInt","innerText","dface","setAttribute","selectDice","add","deactivateDice","$e6882a552a435528$export$2e39a28c33c551aa","checkActivation","refreshItem","deselectItem","activateItem","$a07cc7865d8ae4a5$export$823928a8a208cbf3","clearSelections","deactivateItem","clearDiceBag","diceBag","document","generateButtons","clearItemBag","itemBag","selected","querySelectorAll","s","prepend","createElement","newGameBtn","onclick","e","preventDefault","$0f66a82e4bdaff40$export$bb2f1e3630f06790","initiateNewGame","endTurnBtn","haveDices","i","length","haveItems","i1","$ddce20cf6a83a7cf$export$4780dd0a4b9fc05f","fetchDice","diceId","d","generateDices","dicesInput","di","append","dice","currentTarget","$ae318dafed6c632c$export$17a1664ed1fb5d6f","actions","reqDice","minDiceAmount","maxDiceAmount","reqValue","reqExact","perTurnUses","minValue","maxValue","exactValue","$4cade0058b3551cb$export$6bc9baa6e78a4b59","fetchItem","itemId","itm","generateItems","itemsInput","ii","item","itemFace","iname","itemUses","iuses","newGameState","newGame"],"version":3,"file":"dice.aaecdafb.js.map"}